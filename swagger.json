{
  "swagger": "2.0",
  "info": {
    "title": "My Express API",
    "version": "1.0.0",
    "description": "An Express.js API with JWT cookie authentication"
  },
  "host": "localhost:3000",
  "basePath": "",
  "schemes": ["http"],
  "securityDefinitions": {
    "cookieAuth": {
      "type": "apiKey",
      "in": "cookie",
      "name": "jwt"
    },
    "bearerAuth": {
      "type": "http",
      "scheme": "bearer",
      "bearerFormat": "jwt" 
    }
  },
  "paths": {
    "/auth": {
      "post": {
        "summary": "Logs in a user and returns access and refresh tokens",
        "description": "Authenticates a user with a username and password, and returns an access token and a refresh token.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "type": "string"
                },
                "pwd": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful login",
            "schema": {
              "type": "object",
              "properties": {
                "roles": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "accessToken": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Username and password are required"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["Auth"]
      }
    },
    "/logout": {
      "get": {
        "summary": "Logs out the user by clearing the JWT refresh token",
        "description": "This endpoint handles the logout process for an authenticated user. It clears the JWT refresh token from the server-side database and the client-side cookie, effectively logging the user out of the application.",
        "responses": {
          "204": {
            "description": "Successful logout. No content to return."
          },
          "500": {
            "description": "Server error occurred during logout process."
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "tags": ["Auth"]
      }
    },
    "/refresh": {
      "get": {
        "summary": "Refreshes the access token",
        "description": "Refreshes the access token using the refresh token stored in the cookie.",
        "responses": {
          "200": {
            "description": "Successful token refresh",
            "schema": {
              "type": "object",
              "properties": {
                "roles": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "accessToken": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "tags": ["Auth"]
      }
    },
    "/register": {
      "post": {
        "summary": "Registers a new user",
        "description": "Creates a new user account with a username and password.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "type": "string"
                },
                "pwd": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created successfully"
          },
          "400": {
            "description": "Username and password are required"
          },
          "409": {
            "description": "Username already exists"
          },
          "500": {
            "description": "Server error"
          }
        },
        "tags": ["Auth"]
      }
    },
    "/users": {
      "get": {
        "summary": "Get all users",
        "description": "Returns a list of all registered users.",
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "204": {
            "description": "No users found"
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "tags": ["Users"]
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Get a user by ID",
        "description": "Returns a user object based on the provided user ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "204": {
            "description": "User not found"
          },
          "400": {
            "description": "User ID is required"
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "tags": ["Users"]
      },
      "delete": {
        "summary": "Delete a user",
        "description": "Deletes a user based on the provided user ID.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "204": {
            "description": "User not found"
          },
          "400": {
            "description": "User ID is required"
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "tags": ["Users"]
      }
    },
    "/instructors": {
      "get": {
        "summary": "Get all instructors",
        "description": "Returns a list of all instructors. Requires authorization.",
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Instructor"
              }
            }
          },
          "204": {
            "description": "No instructors found"
          }
        },
        "security": [],
        "tags": ["Instructors"]
      },
      "post": {
        "summary": "Create a new instructor (Admin or Editor role required)",
        "description": "Creates a new instructor. Requires Admin or Editor role.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "firstname": {
                  "type": "string",
                  "required": true
                },
                "lastname": {
                  "type": "string",
                  "required": true
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instructor created successfully",
            "schema": {
              "$ref": "#/definitions/Instructor"
            }
          },
          "400": {
            "description": "First and last names are required"
          }
        },
        "security": [],
        "tags": ["Instructors"]
      },
      "put": {
        "summary": "Update an instructor (Admin or Editor role required)",
        "description": "Updates an existing instructor. Requires Admin or Editor role.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "required": true
                },
                "firstname": {
                  "type": "string"
                },
                "lastname": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Instructor"
            }
          },
          "204": {
            "description": "Instructor not found"
          },
          "400": {
            "description": "Instructor ID is required"
          }
        },
        "security": [],
        "tags": ["Instructors"]
      },
      "delete": {
        "summary": "Delete an instructor (Admin role required)",
        "description": "Deletes an instructor based on the provided instructor ID. Requires Admin role.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "required": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response (empty body)"
          },
          "204": {
            "description": "Instructor not found"
          },
          "400": {
            "description": "Instructor ID is required"
          }
        },
        "security": [],
        "tags": ["Instructors"]
      }
    },
    "/instructors/{id}": {
      "get": {
        "summary": "Get an instructor by ID",
        "description": "Retrieves a specific instructor based on their ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Instructor"
            }
          },
          "204": {
            "description": "Instructor not found"
          }
        },
        "security": [],
        "tags": ["Instructors"]
      }
    },
    "/blog": {
      "get": {
        "summary": "Get all blogs",
        "description": "Returns a list of all blogs. Requires authorization.",
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Instructor"
              }
            }
          },
          "204": {
            "description": "No instructors found"
          }
        },
        "security": [],
        "tags": ["Blogs"]
      },
      "post": {
        "summary": "Create a new blog (Admin or Editor role required)",
        "description": "Creates a new blog. Requires Admin or Editor role.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "required": true
                },
                "description": {
                  "type": "string",
                  "required": true
                },
                "image": {
                  "type": "string",
                  "required": true
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Blog created successfully",
            "schema": {
              "$ref": "#/definitions/Blog"
            }
          },
          "400": {
            "description": "Title, description and image are required"
          }
        },
        "security": [],
        "tags": ["Blogs"]
      },
      "put": {
        "summary": "Update an blog (Admin or Editor role required)",
        "description": "Updates an existing blog. Requires Admin or Editor role.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "required": true
                },
                "title": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "image": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Blog"
            }
          },
          "204": {
            "description": "Blog not found"
          },
          "400": {
            "description": "Blog ID is required"
          }
        },
        "security": [],
        "tags": ["Blogs"]
      },
      "delete": {
        "summary": "Delete an blog (Admin role required)",
        "description": "Deletes an blog based on the provided blof ID. Requires Admin role.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "required": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response (empty body)"
          },
          "204": {
            "description": "Blog not found"
          },
          "400": {
            "description": "Blog ID is required"
          }
        },
        "security": [],
        "tags": ["Blogs"]
      }
    },
    "/blog/{id}": {
      "get": {
        "summary": "Get an blog by ID",
        "description": "Retrieves a specific blog based on their ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Blog"
            }
          },
          "204": {
            "description": "Blog not found"
          }
        },
        "security": [],
        "tags": ["Blogs"]
      }
    },
    "/news": {
      "get": {
        "summary": "Get all news",
        "description": "Returns a list of all news articles. Requires authorization.",
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NewsItem"
              }
            }
          },
          "204": {
            "description": "No news articles found"
          }
        },
        "security": [],
        "tags": ["News"]
      },
      "post": {
        "summary": "Create a new news article (Admin or Editor role required)",
        "description": "Creates a new news article. Requires Admin or Editor role.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "required": true
                },
                "description": {
                  "type": "string",
                  "required": true
                },
                "image": {
                  "type": "string",
                  "required": true
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "News article created successfully",
            "schema": {
              "$ref": "#/definitions/NewsItem"
            }
          },
          "400": {
            "description": "Title, description, and image are required"
          }
        },
        "security": [],
        "tags": ["News"]
      },
      "put": {
        "summary": "Update a news article (Admin or Editor role required)",
        "description": "Updates an existing news article. Requires Admin or Editor role.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "required": true
                },
                "title": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "image": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/NewsItem"
            }
          },
          "404": {
            "description": "News article not found"
          },
          "400": {
            "description": "News article ID is required"
          }
        },
        "security": [],
        "tags": ["News"]
      },
      "delete": {
        "summary": "Delete a news article (Admin role required)",
        "description": "Deletes a news article based on the provided ID. Requires Admin role.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "required": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response (empty body)"
          },
          "404": {
            "description": "News article not found"
          },
          "400": {
            "description": "News article ID is required"
          }
        },
        "security": [],
        "tags": ["News"]
      }
    },
    "/news/{id}": {
      "get": {
        "summary": "Get a news article by ID",
        "description": "Retrieves a specific news article based on its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/NewsItem"
            }
          },
          "404": {
            "description": "News article not found"
          }
        },
        "security": [],
        "tags": ["News"]
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "roles": {
          "type": "object"
        },
        "refreshToken": {
          "type": "string"
        }
      }
    },
    "securityDefinitions": {
      "bearerAuth": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    },
    "Instructor": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        }
      }
    },
    "Blog": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "image": {
          "type": "string"
        }

      }
    }
  },
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication and authorization related endpoints"
    },
    {
      "name": "Users",
      "description": "User management endpoints"
    },
    {
      "name": "Instructors",
      "description": "Instructor management endpoints"
    }
  ]
}
